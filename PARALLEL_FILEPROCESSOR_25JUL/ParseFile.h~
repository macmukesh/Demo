//#include "FileHandler.h"
#include "Utility.h"
#include "BaseParser.h"
#include "CommonQueueData.h"
#include <vector>
#include <stdlib.h>

#include "StringConv.h"
//#define MAX_ROW_LEN 1000
//#define MAX_FILENM_LEN	100
//#define MAX_DATE_LEN	6


enum
{
	INPUT,
	PROCESSING,
	PROCESSED,
	REJECT,
	BAD
};

typedef struct
{
	unsigned long lLastPos;
	unsigned long lCurrPos;	
}TankPos;

// declare enum to hold various parse file typ
class ParseFile
{
		public:
						ParseFile(BaseParser *);
						~ParseFile();
						bool Init();
						bool Run();
						bool EOJ();
						bool ValidateSub(const char *);
						void PrintReport(FileInfo & ,char);
						size_t Open(char * ,unsigned short int ,char *);										// open the file
						size_t GetFileLength(char * );																			// length of file	
						

		private:
						FILE * fp;																			// file pointer
						ifstream ifs;																		// stream pointer
						unsigned int iReadPos;													// iReadPos=current pointer
						unsigned short int iMethodTyp;									// method typ to open file
						unsigned int iByteReadCnt;											// no of byte read last
						static const int BLOCKREADSZ=4096;							// max buffer size

						string strErrorDesc;														// strReadData=buffer which hold data,strErrorDesc=buffer which hold errordesc
						char acreaddata[BLOCKREADSZ];										// 
						void Close();																		// close the file

						ofstream ofOutWrite;														// out write

		private:
						bool bInitFlg;																							// new subject flag
						string strQNAME;
						int iBytPos,iRowCnt,iPrevPos,iRowPos,iFNO;
						vector<ArrBufferData> vecRowData;
						ArrBufferData arrRowData[MAX_ROW_LEN];
						ArrBufferData ObjData;
						static const int iMAXNOOFQ=10;
						TankPos lRawSeqNo[iMAXNOOFQ];													// seq no of rawdata

						FileInfo ObjFileInfo,ObjQInfo,ObjPInfo;
						vector<FileInfo> vecFileLvlInfo;
						vector<FileInfo> vecTotalInfo;

						time_t start,end;
						ofstream ofsProgWrite,ofsBadFile;														// write error log into it	

						int pStart;	//	//added on 12jun18
						BaseParser * ptrParser;	

						void IdentifyReadFormat(FileFmtTyp );
						void AddRow(ArrBufferData & );
						int  GetNextSubNo();
						unsigned int (ParseFile::*FParseFileTyp)(const char *,long,bool);
						void ResetRow();
						void ResetFileInfo(FileInfo &);
						void EndOfSubject();

						inline unsigned long GetNextTankSeqNo()
						{
								// continuous seqno
								return ++lRawSeqNo[iQno].lCurrPos;
						}

						unsigned int ParseFileTyp1(const char *,long,bool );			// parse file based on "\n" i.e newline 
						unsigned int ParseFileTyp2(const char *,long,bool);				// parse file based on masternp format
						unsigned int ParseFileTyp3(const char *,long,bool);				// parse file based on ptlf format
						unsigned int ParseFileTyp4(const char *,long,bool);				// parse file based on append format..DCF/cyber/mvisa/visactf
						unsigned int ParseFileTyp5(const char *,long,bool);				// reserved
						unsigned int ParseFileTyp6(const char *,long,bool);				// reserved
						unsigned int ParseFileTyp7(const char *,long,bool);				// reserved
						unsigned int ParseFileTyp8(const char *,long,bool);				// reserved						
						unsigned int ParseFileTyp9(const char *,long,bool);				// reserved						
	private:
						Utility  ObjUtil;
						int iQno,iBtNo,iTcrCnt;
						char ObjData_ReadLine[BLOCKREADSZ];																			// new subject flag
						//Normaliser * ptrNorm;
						string strFileNm,strInpPath,strFileNmWithoutPath;
						vector<string> vecPath;
						vector<string> vecDirList,vecQName;

						void ProcessSubject();
						void EndOfQueueProcess();
						void EndOfBatchProcess();
						void GetNextSubject(const string );
						void ProcessRow(const int ,int & );
						void RemoveNewLine(const char * ,char * ,unsigned short &);
						void RemoveGarbage(const char * ,char * ,unsigned short &);

};
